basePath: /
definitions:
  dto.LoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.ProductDTO:
    properties:
      name:
        type: string
      price:
        type: number
    type: object
  dto.UserDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: brenoproti@gmail
    name: Breno Proti
  description: This is a sample server Product server.
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Go API
  version: "1.0"
paths:
  /products:
    get:
      consumes:
      - application/json
      description: Get products paginated
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit per page
        in: query
        name: limit
        type: integer
      - description: Sort by field
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get products paginated
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product
      parameters:
      - description: Product info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProductDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Product created
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Find a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductDTO'
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Find a product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProductDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Product updated
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update a product
      tags:
      - products
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: User created
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create a new user
      tags:
      - users
  /users/generate_token:
    post:
      consumes:
      - application/json
      description: Get JWT token
      parameters:
      - description: User info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Token created
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get JWT token
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
